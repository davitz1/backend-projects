#!/usr/bin/env python3

# imports

from storage import load_tasks, save_tasks, generate_id
from models.task import Task
from dataclasses import asdict
import argparse


def main():
    parser = argparse.ArgumentParser(prog="Tasker", description="Manage tasks.")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # subparser add
    parser_add = subparsers.add_parser("add", help="Add a new task")
    parser_add.add_argument("desc", type=str, help="Task description")

    # subparser list
    parser_list = subparsers.add_parser("list", help="List of all tasks")
    parser_list.add_argument(
        "-t", "-todo", action="store_true", help="List of all to-do tasks"
    )
    parser_list.add_argument(
        "-d", "-done", action="store_true", help="List of all done tasks"
    )
    parser_list.add_argument(
        "-inp",
        "-in-progress",
        action="store_true",
        help="List of all in-progress tasks",
    )
    parser_list.add_argument(
        "-v", "--verbose", action="store_true", help="Show full details"
    )

    # subparser for marking as done and in progress
    parser_done = subparsers.add_parser("done", help="Mark a task as done")
    parser_done.add_argument(
        "task_id", type=str, help="ID of the task to be marked as done"
    )

    parser_inprog = subparsers.add_parser("inprog", help="Mark a task as in progress")
    parser_inprog.add_argument(
        "task_id", type=str, help="ID of the task to be marked as in progress"
    )

    # arg parsing
    args = parser.parse_args()

    tasks = load_tasks()
    task_id = None
    # output
    # add command
    if args.command == "add":
        task = Task(desc=args.desc)
        task_id = generate_id(tasks)
        tasks[task_id] = asdict(task)
        save_tasks(tasks)
        print(f"[ADD] Task added: {task_id}: {args.desc}")

    # list command
    elif args.command == "list":
        if not tasks:
            print("No tasks found.")
        else:
            for task_id, data in tasks.items():
                desc = data["desc"]
                status = data["status"]
                if args.verbose:
                    created_at = data.get("created_at", "N/A")
                    updated_at = data.get("updated_at", "N/A")
                    print(f"[{task_id:>2}]: {desc} - {status}") 
                    print(f"        Created: {created_at}")
                    print(f"        Updated: {updated_at}\n")
                else:
                    print(f"[{task_id:>2}]: {desc} - {status}")

    # done command
    elif args.command == "done":
        task_id = args.task_id
        if not task_id in tasks:
            print(f"Task [{task_id}] not found.")
        else:
            task = Task(**tasks[task_id])
            task.update_status("done")
            tasks[task_id] = asdict(task)
            save_tasks(tasks)
            print(f"[DONE] Task {args.task_id} marked as done")

    # inprog command
    elif args.command == "inprog":
        task_id = args.task_id
        if not task_id in tasks:
            print(f"Task [{task_id}] not found.")
        else:
            task = Task(**tasks[task_id])
            task.update_status("in-progress")
            tasks[task_id] = asdict(task)
            save_tasks(tasks)
            print(f"[INPROG] Task {args.task_id} marked as in progress")


if __name__ == "__main__":
    main()
